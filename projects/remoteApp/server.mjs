import './polyfills.server.mjs';
import{a as s,e as B}from"./chunk-76JTJFRD.mjs";import{a as l,b as p,e as C,f as j,i as I}from"./chunk-43QIWE34.mjs";function b(o,e){return{imports:l(l({},o.imports),e.imports),scopes:l(l({},o.scopes),e.scopes)}}function f(o){return`${o.packageName}@${o.version}`}function L(o){let e=f(o);return w.get(e)}function h(o,e){let t=f(o);w.set(t,e)}function x(o){let e=o.split("/");return e.pop(),e.join("/")}function d(o,e){for(;o.endsWith("/");)o=o.substring(0,o.length-1);return e.startsWith("./")&&(e=e.substring(2,e.length)),`${o}/${e}`}function E(o,e){Q.set(o,e),M.set(e.baseUrl,o)}function X(t){return I(this,arguments,function*(o,e={throwIfRemoteNotFound:!1}){let c=Object.keys(o).map(g=>I(this,null,function*(){try{let i=o[g];return yield O(i,g)}catch{let W=`Error loading remote entry for ${g} from file ${o[g]}`;if(e.throwIfRemoteNotFound)throw new Error(W);return console.error(W),null}}));return(yield Promise.all(c)).reduce((g,i)=>i?b(g,i):g,{imports:{},scopes:{}})})}function O(o,e){return I(this,null,function*(){let t=x(o),c=yield D(o);e||(e=c.name);let n=P(c,e,t);return E(e,p(l({},c),{baseUrl:t})),n})}function P(o,e,t){let c=$(o,e,t),n=_(o,t);return{imports:c,scopes:n}}function D(o){return I(this,null,function*(){return yield fetch(o).then(t=>t.json())})}function _(o,e){let t={},c={};for(let n of o.shared){let r=L(n)??d(e,n.outFileName);h(n,r),c[n.packageName]=r}return t[e+"/"]=c,t}function $(o,e,t){let c={};for(let n of o.exposes){let r=d(e,n.key),g=d(t,n.outFileName);c[r]=g}return c}function N(o,e="./"){return I(this,null,function*(){let t=o.shared.reduce((c,n)=>p(l({},c),{[n.packageName]:e+n.outFileName}),{});for(let c of o.shared)h(c,e+c.outFileName);return{imports:t,scopes:{}}})}var y,G,Z,w,Q,M,A=C(()=>{"use strict";y="__NATIVE_FEDERATION__",G=globalThis;G[y]??={externals:new Map,remoteNamesToRemote:new Map,baseUrlToRemoteNames:new Map};Z=G[y],w=Z.externals;Q=Z.remoteNamesToRemote,M=Z.baseUrlToRemoteNames});import J from"path";import q from"url";import{promises as oo}from"fs";function H(o){if(!a(o))throw Error("Invalid import map - top level must be an object");let e={};if(o.hasOwnProperty("imports")){if(!a(o.imports))throw Error('Invalid import map - "imports" property must be an object');e=v(o.imports,V)}let t={};if(o.hasOwnProperty("scopes")){if(!a(o.scopes))throw Error('Invalid import map - "scopes" property must be an object');t=to(o.scopes,V)}let c=Object.keys(o).filter(n=>n!=="imports"&&n!=="scopes");return c.length>0&&console.warn(`Invalid top-level key${c.length>0?"s":""} in import map - ${c.join(", ")}`),{imports:e,scopes:t}}function v(o,e){let t={};for(let c in o){let n=o[c],r=eo(c,e);if(r===null)continue;let g=K(n,e);if(g===null){console.warn(`Invalid URL address for import map specifier '${c}'`),t[r]=null;continue}if(c.endsWith("/")&&!g.endsWith("/")){console.warn(`Invalid URL address for import map specifier '${c}' - since the specifier ends in slash, so must the address`),t[r]=null;continue}t[r]=g}return t}function eo(o){return o===""?(console.warn("Specifier keys in import maps may not be the empty string"),null):K(o,V)||o}function K(o,e){let t=o.startsWith("/")||o.startsWith("./")||o.startsWith("../");try{return new URL(o,t?e:void 0).href}catch{return null}}function to(o,e){let t={};for(let c in o){let n=o[c];if(!a(n))throw TypeError(`The value of scope ${c} must be a JSON object`);let r;try{r=new URL(c,e).href}catch{console.warn(`Scope prefix URL '${c}' was not parseable in import map`);continue}t[r]=v(n,e)}return t}function a(o){return o===Object(o)&&!Array.isArray(o)}function no(){return s(this,void 0,void 0,function*(){let o=process.env.IMPORT_MAP_PATH||u,e=J.resolve(process.cwd(),o),t;try{t=yield oo.readFile(e)}catch{return go()}let c;try{c=yield JSON.parse(t)}catch(n){throw Error(`Import map at ${e} contains invalid json: ${n.message}`)}return H(c)})}function go(){return{imports:{},scopes:{}}}var u,V,co,Y=C(()=>{"use strict";B();u="node.importmap",V=q.pathToFileURL(process.cwd())+J.sep;co=no();global.nodeLoader=global.nodeLoader||{};global.nodeLoader.setImportMapPromise=function(e){co=e.then(t=>H(t))}});var F,R=C(()=>{"use strict";F=""});import{register as ro}from"module";import{pathToFileURL as so}from"url";import*as m from"fs/promises";import*as S from"path";function k(o){return s(this,void 0,void 0,function*(){let e=Object.assign(Object.assign({},Io),o),t=yield lo(e);yield Co(t),yield ao(),ro(so("./federation-resolver.mjs").href)})}function lo(o){return s(this,void 0,void 0,function*(){let{remotesOrManifestUrl:e,relBundlePath:t}=o,c=typeof e=="object"?e:yield io(e),n=yield mo(t),r=yield N(n,t),g=yield X(c,{throwIfRemoteNotFound:o.throwIfRemoteNotFound});return b(r,g)})}function io(o){return s(this,void 0,void 0,function*(){let e=yield m.readFile(o,"utf-8");return JSON.parse(e)})}function mo(o){return s(this,void 0,void 0,function*(){let e=S.join(o,"remoteEntry.json"),t=yield m.readFile(e,"utf-8");return JSON.parse(t)})}function Co(o){return s(this,void 0,void 0,function*(){yield m.writeFile(u,JSON.stringify(o,null,2),"utf-8")})}function ao(){return s(this,void 0,void 0,function*(){let o=Buffer.from(F,"base64");yield m.writeFile("federation-resolver.mjs",o,"utf-8")})}var Io,z=C(()=>{"use strict";B();A();A();Y();R();Io={remotesOrManifestUrl:{},relBundlePath:"../browser",throwIfRemoteNotFound:!1}});var T=C(()=>{"use strict";z()});var po=j(U=>{T();I(U,null,function*(){yield k({relBundlePath:"./dist/remote-app/browser/"}),yield import("./chunk-OKJOZWIA.mjs")})});export default po();
